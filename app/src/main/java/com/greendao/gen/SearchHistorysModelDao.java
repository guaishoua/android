package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.tacu.db.model.SearchHistorysModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_HISTORYS_MODEL".
*/
public class SearchHistorysModelDao extends AbstractDao<SearchHistorysModel, Long> {

    public static final String TABLENAME = "SEARCH_HISTORYS_MODEL";

    /**
     * Properties of entity SearchHistorysModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, int.class, "uid", false, "UID");
        public final static Property CurrencyId = new Property(2, int.class, "currencyId", false, "CURRENCY_ID");
        public final static Property BaseCurrencyId = new Property(3, int.class, "baseCurrencyId", false, "BASE_CURRENCY_ID");
        public final static Property CurrencyNameEn = new Property(4, String.class, "currencyNameEn", false, "CURRENCY_NAME_EN");
        public final static Property BaseCurrencyNameEn = new Property(5, String.class, "baseCurrencyNameEn", false, "BASE_CURRENCY_NAME_EN");
    }


    public SearchHistorysModelDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHistorysModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_HISTORYS_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"CURRENCY_ID\" INTEGER NOT NULL ," + // 2: currencyId
                "\"BASE_CURRENCY_ID\" INTEGER NOT NULL ," + // 3: baseCurrencyId
                "\"CURRENCY_NAME_EN\" TEXT," + // 4: currencyNameEn
                "\"BASE_CURRENCY_NAME_EN\" TEXT);"); // 5: baseCurrencyNameEn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_HISTORYS_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchHistorysModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getCurrencyId());
        stmt.bindLong(4, entity.getBaseCurrencyId());
 
        String currencyNameEn = entity.getCurrencyNameEn();
        if (currencyNameEn != null) {
            stmt.bindString(5, currencyNameEn);
        }
 
        String baseCurrencyNameEn = entity.getBaseCurrencyNameEn();
        if (baseCurrencyNameEn != null) {
            stmt.bindString(6, baseCurrencyNameEn);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchHistorysModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getCurrencyId());
        stmt.bindLong(4, entity.getBaseCurrencyId());
 
        String currencyNameEn = entity.getCurrencyNameEn();
        if (currencyNameEn != null) {
            stmt.bindString(5, currencyNameEn);
        }
 
        String baseCurrencyNameEn = entity.getBaseCurrencyNameEn();
        if (baseCurrencyNameEn != null) {
            stmt.bindString(6, baseCurrencyNameEn);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchHistorysModel readEntity(Cursor cursor, int offset) {
        SearchHistorysModel entity = new SearchHistorysModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // uid
            cursor.getInt(offset + 2), // currencyId
            cursor.getInt(offset + 3), // baseCurrencyId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // currencyNameEn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // baseCurrencyNameEn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchHistorysModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getInt(offset + 1));
        entity.setCurrencyId(cursor.getInt(offset + 2));
        entity.setBaseCurrencyId(cursor.getInt(offset + 3));
        entity.setCurrencyNameEn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBaseCurrencyNameEn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchHistorysModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchHistorysModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchHistorysModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
